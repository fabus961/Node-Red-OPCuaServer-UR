[{"id":"30ded7dc.266628","type":"tab","label":"OPC UA Server","disabled":false,"info":""},{"id":"1ebf0f31.0abd01","type":"link in","z":"30ded7dc.266628","name":"OPC UA","links":["4e2eda9.a6a7324","c9baeacc.258e08"],"x":195,"y":140,"wires":[["5270a26e.dd40ec","a5b9cc12.7ae04"]]},{"id":"5270a26e.dd40ec","type":"function","z":"30ded7dc.266628","name":"Digital Input output - set flow context (Sent to OPC UA Server)","func":"//Temp values inside function\nvar isoOutput;\nvar isoInput;\n\n//If statement, makes sure that a value always is sent and not 'undefined'\nif(typeof msg.URinput !== 'undefined') {\n    flow.set('isoInput', msg.URinput)\n    isoInput = msg.URinput;\n} \n\n\nif(typeof msg.URoutput !== 'undefined') {\n    flow.set('isoOutput', msg.URoutput)\n    isoOutput = msg.URoutput;\n}\n\n//Set value from msg.xxxx to global value for the compact OPC UA server\n//flow.set('isoOutput', msg.URoutput)\n//flow.set('isoInput', msg.URinput)\n\n//Makes a msg.payload that sent the values to the server\nmsg.payload = [\n    flow.get('isoOutput'),\n    flow.get('isoInput'),\n]\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":60,"wires":[["e816019b.81c07"]]},{"id":"e816019b.81c07","type":"debug","z":"30ded7dc.266628","name":"UR Output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":890,"y":100,"wires":[]},{"id":"962b0f2c.29979","type":"opcua-compact-server","z":"30ded7dc.266628","port":"55555","endpoint":"","productUri":"","acceptExternalCommands":true,"maxAllowedSessionNumber":"10","maxConnectionsPerEndpoint":"10","maxAllowedSubscriptionNumber":"100","alternateHostname":"","name":"","showStatusActivities":false,"showErrors":true,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsetsOPCUA":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":"1","discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerWrite":1000,"maxNodesPerHistoryReadData":100,"maxNodesPerBrowse":3000,"maxBrowseContinuationPoints":"10","maxHistoryContinuationPoints":"10","delayToInit":"1000","delayToClose":"200","serverShutdownTimeout":"100","addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = address space of the node-opcua server\n  // eventObjects = add event variables here to hold them in memory from this script\n\n  // internal sandbox objects are:\n  // node = the compact server node,\n  // coreServer = core compact server object for debug and access to NodeOPCUA\n  // this.sandboxNodeContext = node context node-red\n  // this.sandboxFlowContext = flow context node-red\n  // this.sandboxGlobalContext = global context node-red\n  // this.sandboxEnv = env variables\n  // timeout and interval functions as expected from nodejs\n\n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n\n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n\n\n\n  this.sandboxFlowContext.set(\"isoInput\", 0);\n\n  this.sandboxFlowContext.set(\"isoInput\", 0);\n  \n  this.sandboxFlowContext.set(\"isoJoint0\", 0);\n  this.sandboxFlowContext.set(\"isoJoint1\", 0);\n  this.sandboxFlowContext.set(\"isoJoint2\", 0);\n  this.sandboxFlowContext.set(\"isoJoint3\", 0);\n  this.sandboxFlowContext.set(\"isoJoint4\", 0);\n  this.sandboxFlowContext.set(\"isoJoint5\", 0);\n  \n  \n\t\n  coreServer.debugLog(\"init dynamic address space\");\n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n\n  node.warn(\"construct new address space for OPC UA\");\n\n  const myDevice = namespace.addFolder(rootFolder.objects, {\n    \"browseName\": \"Universal Robot\"\n  });\n\n  const DigitalInputOutput = namespace.addFolder(myDevice, { \"browseName\": \"Digital InputOutput\" });\n  const isoInputs = namespace.addFolder(DigitalInputOutput, {\"browseName\": \"Inputs\"});\n  const isoOutputs = namespace.addFolder(DigitalInputOutput, {\"browseName\": \"Outputs\"});\n\n  const RobotJointsDeg = namespace.addFolder(myDevice, { \"browseName\": \"Joints [deg]\" });\n  const isoJoint0 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint0\"});\n  const isoJoint1 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint1\"});\n  const isoJoint2 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint2\"});\n  const isoJoint3 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint3\"});\n  const isoJoint4 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint4\"});\n  const isoJoint5 = namespace.addFolder(RobotJointsDeg, {\"browseName\": \"Joint5\"});\n\n//Digital input\n  const DigitalInput = namespace.addVariable({\n    \"organizedBy\": isoInputs,\n    \"browseName\": \"Input\",\n    \"nodeId\": \"ns=1;s=Isolated_Input\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoInput\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoInput\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Digital output\n   const DigitalOutput = namespace.addVariable({\n    \"organizedBy\": isoOutputs,\n    \"browseName\": \"Output\",\n    \"nodeId\": \"ns=1;s=Isolated_Output\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoOutput\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoInput\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 0   \n   const Joint0 = namespace.addVariable({\n    \"organizedBy\": isoJoint0,\n    \"browseName\": \"Joint0\",\n    \"nodeId\": \"ns=1;s=Joint0deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint0\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint0\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 1 \n   const Joint1 = namespace.addVariable({\n    \"organizedBy\": isoJoint1,\n    \"browseName\": \"Joint1\",\n    \"nodeId\": \"ns=1;s=Joint1deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint1\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint1\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 2\n   const Joint2 = namespace.addVariable({\n    \"organizedBy\": isoJoint2,\n    \"browseName\": \"Joint2\",\n    \"nodeId\": \"ns=1;s=Joint2deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint2\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint2\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 3\n   const Joint3 = namespace.addVariable({\n    \"organizedBy\": isoJoint3,\n    \"browseName\": \"Joint3\",\n    \"nodeId\": \"ns=1;s=Joint3deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint3\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint3\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 4\n   const Joint4 = namespace.addVariable({\n    \"organizedBy\": isoJoint4,\n    \"browseName\": \"Joint4\",\n    \"nodeId\": \"ns=1;s=Joint4deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint4\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint4\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n//Joint 5\n   const Joint5 = namespace.addVariable({\n    \"organizedBy\": isoJoint5,\n    \"browseName\": \"Joint5\",\n    \"nodeId\": \"ns=1;s=Joint5deg\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"isoJoint5\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"isoJoint5\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });  \n\n  //------------------------------------------------------------------------------\n  // Add a view\n  //------------------------------------------------------------------------------\n  const viewDIO = namespace.addView({\n    \"organizedBy\": rootFolder.views,\n    \"browseName\": \"UR-Digital-Input-Output\"\n  });\n  \n  const viewJoints = namespace.addView({\n    \"organizedBy\": rootFolder.views,\n    \"browseName\": \"UR-Joints\"\n  });\n\n  \n  viewDIO.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": DigitalInput.nodeId\n  });\n\n  viewDIO.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": DigitalOutput.nodeId\n  });\n  \n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint0.nodeId\n  });\n\n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint1.nodeId\n  });\n\n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint2.nodeId\n  });\n\n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint3.nodeId\n  });\n\n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint4.nodeId\n  });\n\n  viewJoints.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": Joint5.nodeId\n  });\n\n  coreServer.debugLog(\"create dynamic address space done\");\n  node.warn(\"construction of new address space for OPC UA done\");\n\n  done();\n}\n","x":100,"y":60,"wires":[]},{"id":"a5b9cc12.7ae04","type":"function","z":"30ded7dc.266628","name":"Joints - set flow context (Sent to OPC UA Server)","func":"//Temp values inside function\nvar isoJoint0;\nvar isoJoint1;\nvar isoJoint2;\nvar isoJoint3;\nvar isoJoint4;\nvar isoJoint5;\n\n//If statement, makes sure that a value always is sent and not 'undefined'\nif(typeof msg.URJ0 !== 'undefined') {\n    flow.set('isoJoint0', msg.URJ0)\n    isoInput = msg.URJ0;\n} \n\nif(typeof msg.URJ1 !== 'undefined') {\n    flow.set('isoJoint1', msg.URJ1)\n    isoInput = msg.URJ1;\n} \n\nif(typeof msg.URJ2 !== 'undefined') {\n    flow.set('isoJoint2', msg.URJ2)\n    isoInput = msg.URJ2;\n} \n\nif(typeof msg.URJ3 !== 'undefined') {\n    flow.set('isoJoint3', msg.URJ3)\n    isoInput = msg.URJ3;\n} \n\nif(typeof msg.URJ4 !== 'undefined') {\n    flow.set('isoJoint4', msg.URJ4)\n    isoInput = msg.URJ4;\n} \n\nif(typeof msg.URJ5 !== 'undefined') {\n    flow.set('isoJoint5', msg.URJ5)\n    isoInput = msg.URJ5;\n} \n\n\n//Makes a msg.payload that sent the values to the server\nmsg.payload = [\n    flow.get('isoJoint0'),\n    flow.get('isoJoint1'),\n    flow.get('isoJoint2'),\n    flow.get('isoJoint3'),    \n    flow.get('isoJoint4'),\n    flow.get('isoJoint5'), \n]\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":100,"wires":[["e816019b.81c07"]]}]